name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary-name: mdde
            asset-name: mdde-linux-x64
            
          # Windows x64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary-name: mdde.exe
            asset-name: mdde-windows-x64.exe
            
          # macOS Intel
          - target: x86_64-apple-darwin
            os: macos-latest
            binary-name: mdde
            asset-name: mdde-macos-x64
            
          # macOS Apple Silicon
          - target: aarch64-apple-darwin
            os: macos-latest
            binary-name: mdde
            asset-name: mdde-macos-arm64

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装 Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: 配置 Rust 缓存
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "mdde-cmd -> target"
        key: ${{ matrix.target }}

    - name: 安装 Linux 依赖
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: 构建项目
      working-directory: mdde-cmd
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: 准备发布文件
      shell: bash
      run: |
        mkdir -p release-builds/${{ matrix.target }}
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp mdde-cmd/target/${{ matrix.target }}/release/${{ matrix.binary-name }} release-builds/${{ matrix.target }}/
        else
          cp mdde-cmd/target/${{ matrix.target }}/release/${{ matrix.binary-name }} release-builds/${{ matrix.target }}/
          chmod +x release-builds/${{ matrix.target }}/${{ matrix.binary-name }}
        fi

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset-name }}
        path: release-builds/${{ matrix.target }}/${{ matrix.binary-name }}
        retention-days: 30

  # 运行测试
  test:
    name: 运行测试
    runs-on: ubuntu-latest
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装 Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 配置 Rust 缓存
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "mdde-cmd -> target"

    - name: 安装依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: 运行测试
      working-directory: mdde-cmd
      run: cargo test --verbose

    - name: 运行 Clippy
      working-directory: mdde-cmd
      run: cargo clippy -- -D warnings

    - name: 检查格式
      working-directory: mdde-cmd
      run: cargo fmt -- --check

  # 创建发布版本
  release:
    name: 创建发布版本
    needs: [build, test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: 准备发布文件
      run: |
        mkdir -p release-assets
        
        # Linux x64
        cp artifacts/mdde-linux-x64/mdde release-assets/mdde-linux-x64
        chmod +x release-assets/mdde-linux-x64
        
        # Windows x64
        cp artifacts/mdde-windows-x64.exe/mdde.exe release-assets/mdde-windows-x64.exe
        
        # macOS Intel
        cp artifacts/mdde-macos-x64/mdde release-assets/mdde-macos-x64
        chmod +x release-assets/mdde-macos-x64
        
        # macOS Apple Silicon
        cp artifacts/mdde-macos-arm64/mdde release-assets/mdde-macos-arm64
        chmod +x release-assets/mdde-macos-arm64

    - name: 创建压缩包
      run: |
        cd release-assets
        
        # Linux
        tar -czf mdde-linux-x64.tar.gz mdde-linux-x64
        
        # Windows
        zip mdde-windows-x64.zip mdde-windows-x64.exe
        
        # macOS Intel
        tar -czf mdde-macos-x64.tar.gz mdde-macos-x64
        
        # macOS Apple Silicon
        tar -czf mdde-macos-arm64.tar.gz mdde-macos-arm64

    - name: 获取版本信息
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: 创建 Release
      uses: softprops/action-gh-release@v1
      with:
        name: MDDE ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          release-assets/mdde-linux-x64.tar.gz
          release-assets/mdde-windows-x64.zip
          release-assets/mdde-macos-x64.tar.gz
          release-assets/mdde-macos-arm64.tar.gz
          release-assets/mdde-linux-x64
          release-assets/mdde-windows-x64.exe
          release-assets/mdde-macos-x64
          release-assets/mdde-macos-arm64
        body: |
          ## 🚀 MDDE ${{ steps.get_version.outputs.VERSION }} 发布

          ### 📦 下载链接
          
          **Linux (x64)**
          - 二进制文件: [mdde-linux-x64](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/mdde-linux-x64)
          - 压缩包: [mdde-linux-x64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/mdde-linux-x64.tar.gz)
          
          **Windows (x64)**
          - 二进制文件: [mdde-windows-x64.exe](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/mdde-windows-x64.exe)
          - 压缩包: [mdde-windows-x64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/mdde-windows-x64.zip)
          
          **macOS (Intel)**
          - 二进制文件: [mdde-macos-x64](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/mdde-macos-x64)
          - 压缩包: [mdde-macos-x64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/mdde-macos-x64.tar.gz)
          
          **macOS (Apple Silicon)**
          - 二进制文件: [mdde-macos-arm64](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/mdde-macos-arm64)
          - 压缩包: [mdde-macos-arm64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/mdde-macos-arm64.tar.gz)

          ### 🛠️ 安装说明
          
          1. 下载对应平台的二进制文件
          2. 将文件重命名为 `mdde` (Windows 保持 `.exe` 扩展名)
          3. 将文件移动到 PATH 环境变量中的目录
          4. 在终端中运行 `mdde --help` 验证安装

          ### 📋 更新日志
          
          详细更新内容请查看下方的自动生成的发布说明。
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
