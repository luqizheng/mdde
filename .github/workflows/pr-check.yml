name: PR Check

on:
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # 快速检查
  quick-check:
    name: 快速检查
    runs-on: ubuntu-latest
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装 Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: 配置 Rust 缓存
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "mdde-cmd -> target"

    - name: 安装依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: 检查格式
      working-directory: mdde-cmd
      run: cargo fmt -- --check

    - name: 运行 Clippy
      working-directory: mdde-cmd
      run: cargo clippy -- -D warnings

    - name: 检查构建
      working-directory: mdde-cmd
      run: cargo check

  # 测试
  test:
    name: 运行测试
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装 Rust
      uses: dtolnay/rust-toolchain@stable

    - name: 配置 Rust 缓存
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "mdde-cmd -> target"
        key: ${{ matrix.os }}

    - name: 安装 Linux 依赖
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: 运行测试
      working-directory: mdde-cmd
      run: cargo test --verbose  RUST_BACKTRACE=1

  # PR 构建预览
  build-preview:
    name: 构建预览 (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.head.repo.full_name == github.repository
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary-name: mdde
            
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary-name: mdde.exe

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装 Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: 配置 Rust 缓存
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "mdde-cmd -> target"
        key: ${{ matrix.target }}

    - name: 安装 Linux 依赖
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev

    - name: 构建项目
      working-directory: mdde-cmd
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: 上传预览构建
      uses: actions/upload-artifact@v4
      with:
        name: mdde-${{ matrix.target }}-preview-${{ github.event.number }}
        path: mdde-cmd/target/${{ matrix.target }}/release/${{ matrix.binary-name }}
        retention-days: 7
